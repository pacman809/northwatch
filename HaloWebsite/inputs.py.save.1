# Dictionary of Inputs
# Top SECRET *** I will find you :)
from web3 import Web3
#import json
import json as simplejson
from datetime import datetime
#from inputFunction import parse
#from inputFunction import hextodec
#from inputFunction import dectohex
#from contracts import contractType
import pymongo
from web3 import Web3
import search
from datetime import datetime
#------------------------------------------------------------------------------------------------------------
#GENERAL TRANSACTION

def MNPAYOUT(to_address):

	myclient 	= 	pymongo.MongoClient("mongodb://localhost:27017/")
	address 	= 	Web3.toChecksumAddress(to_address)
	web3 		= 	search.connect_geth()
	db 			= 	"halo-explorer-mainnet"
	mydb 		= 	myclient[db]
	myBlock 	= 	mydb["blocks"]
	myCol 		= 	mydb["transactions"]
	
	list 		= 	[]

	
	for x in myCol.find({"to_address": to_address, "input": '0xc885bc58'}):

		block_number = 	x["block_number"]

		#print(f'BLOCK NUMBER {block_number} ')
		post_reward 	= 	Web3.fromWei(web3.eth.getBalance(address, block_number),'Ether')
		block_number 	= 	int(block_number)
		block_number 	= 	block_number - 1
		pre_reward 		= 	Web3.fromWei(web3.eth.getBalance(address, block_number),'Ether')
		reward 			= 	pre_reward - post_reward
		#reward 			= 	
		#reward = 		str(Web3.toWei(reward,'Ether'))
	#	reward = "peanut"

		result	= reward

		#"post" 			: post_reward,
		#"blocks" 		: block_number,
		#"pre_reward" 	: pre_reward,
		#"reward" 		: reward

		#}

		return result




def timestamp(stamp):
			time = 			stamp
			dt = 			datetime.fromtimestamp(time // 1000000000)
			s = 			dt.strftime('%Y-%m-%d %H:%M:%S')
			
			return s

#----------------INPUTS-------HERE-----------------------------------------------------------------

def interHalo(receivedInput):
	
	DESCRIPTOR = "Interhalo Transaction"

	value					= Web3.fromWei(receivedInput['value'], 'Ether'),
	description = f'From {receivedInput["from_address"]} To  {receivedInput["to_address"]}'
	result={
	"descriptor"			: DESCRIPTOR,
	"hash" 					: receivedInput['hash'],			
	"nonce"					: receivedInput['nonce'],
	"block_hash"			: receivedInput['block_hash'],
	"block_number"			: receivedInput['block_number'],
	"transaction_index"		: receivedInput['transaction_index'],
	"from_address"			: receivedInput['from_address'],
	"to_address"			: receivedInput['to_address'],
	"value"					: value,
	"gas" 					: receivedInput['gas'],
	"gas_price"				: receivedInput['gas_price'],
	#"input" 				: receivedInput['input'],
	"block_timestamp"		: timestamp(receivedInput['block_timestamp']),
	"description"			: description
	}
	

	#y = json.dumps((result),sort_keys=True, indent=4, separators=(',', ': '))
	#print(DESCRIPTOR)
	#print("P2P Transaction")
	#print(result)
	#return result
	#COMPLETED
	
	return result

#---------------------------------------------------------------------------------------------------

def noInfo(receivedInput):

	DESCRIPTOR = "PLEASE REPORT BLOCK NUMBER AND A BREIF SUMMARY OF WHAT YOU THINK THIS IS"
	description = f'Unknown At the Current Time'

	result={
	"descriptor"			: DESCRIPTOR,
	"hash" 					: receivedInput['hash'],			
	"nonce"					: receivedInput['nonce'],
	"block_hash"			: receivedInput['block_hash'],
	"block_number"			: receivedInput['block_number'],
	"transaction_index"		: receivedInput['transaction_index'],
	"from_address"			: receivedInput['from_address'],
	"to_address"			: receivedInput['to_address'],
	#"value"					: value,
	"gas" 					: receivedInput['gas'],
	"gas_price"				: receivedInput['gas_price'],
	#"input" 				: receivedInput['input'],
	"block_timestamp"		: timestamp(receivedInput['block_timestamp']),
	"description"			: description
	}
	

	y = json.dumps(result)
	#print(DESCRIPTOR)
	print(result)
	#COMPLETED
#------------------------------------------------------------------------------------------------------------
#MASTERNODES

def masternodePayout(receivedInput):

	DESCRIPTOR = "Masternode Claim"
	to_address = receivedInput["to_address"]

	reward = MNPAYOUT(to_address)

	description = f'Masternode {receivedInput["to_address"]} Payout'
	
	result={
	"descriptor"			: DESCRIPTOR,
	"hash" 					: receivedInput['hash'],			
	"nonce"					: receivedInput['nonce'],
	"block_hash"			: receivedInput['block_hash'],
	"block_number"			: receivedInput['block_number'],
	"transaction_index"		: receivedInput['transaction_index'],
	"from_address"			: receivedInput['from_address'],
	"to_address"			: receivedInput['to_address'],
	"value"					: reward,
	"gas" 					: receivedInput['gas'],
	"gas_price"				: receivedInput['gas_price'],
	#"input" 				: receivedInput['input'],
	"block_timestamp"		: timestamp(receivedInput['block_timestamp']),
	"description"			: description,
	"reward"				: reward
	}
	

	y = result
	#y = json.dumps((result),sort_keys=True, indent=4, separators=(',', ': '))
	#print(DESCRIPTOR)
	return y

#---------------------------------------------------------------------------------------------------------------

def HaloWalletToDex(receivedInput): #0xd0e30db0

	DESCRIPTOR = "Halo --> HaloDex"




	value                                   = Web3.fromWei(receivedInput['value'], 'Ether'),
	description = f'From {receivedInput["from_address"]} To  {receivedInput["to_address"]}'
	
	result={
	"descriptor"                    : DESCRIPTOR,
	"hash"                                  : receivedInput['hash'],
	"nonce"                                 : receivedInput['nonce'],
	"block_hash"                    : receivedInput['block_hash'],
	"block_number"                  : receivedInput['block_number'],
	"transaction_index"             : receivedInput['transaction_index'],
	"from_address"                  : receivedInput['from_address'],
	"to_address"                    : receivedInput['to_address'],
	"value"                                 : value,
	"gas"                                   : receivedInput['gas'],
	"gas_price"                             : receivedInput['gas_price'],
	#"input"                                : receivedInput['input'],
	"block_timestamp"               : timestamp(receivedInput['block_timestamp']),
	"description"                   : description
	}

        #y = json.dumps((result),sort_keys=True, indent=4, separators=(',', ': '))
def HaloWalletToDex(receivedInput): #0xd0e30db0

    DESCRIPTOR = "Halo --> HaloDex"
    value                                   = Web3.fromWei(receivedInput['value'], 'Ether'),
    description = f'From {receivedInput["from_address"]} To  {receivedInput["to_address"]}'

    result={
    "descriptor"                    : DESCRIPTOR,
    "hash"                                  : receivedInput['hash'],
    "nonce"                                 : receivedInput['nonce'],
    "block_hash"                    : receivedInput['block_hash'],
    "block_number"                  : receivedInput['block_number'],
    "transaction_index"             : receivedInput['transaction_index'],
    "from_address"                  : receivedInput['from_address'],
    "to_address"                    : receivedInput['to_address'],
    "value"                                 : value,
    "gas"                                   : receivedInput['gas'],
    "gas_price"                             : receivedInput['gas_price'],
    #"input"                                : receivedInput['input'],
    "block_timestamp"               : timestamp(receivedInput['block_timestamp']),
    "description"                   : description
    }

    #y = json.dumps((result),sort_keys=True, indent=4, separators=(',', ': '))
    #print(DESCRIPTOR)
    #print("P2P Transaction")
    #print(result)
    #return result
    #COMPLETED
    return result

        #print(DESCRIPTOR)
        #print("P2P Transaction")
        #print(result)
        #return result
        #COMPLETED
	 return result

#---------------------------------------------------------------------------------------------------------------
def masternodeSell(receivedInput): #0xd4444da6
	
	DESCRIPTOR = "Masternode Sell Order on Marketplace"
	data = receivedInput["input"]

	answer = parse(data)
	masternode = dectohex(answer[0])
	

	shares_for_sale = int(answer[2])
	shares_for_sale = Web3.fromWei(shares_for_sale, 'Ether')
	asking_price = int(answer[3])
	asking_price = Web3.fromWei(asking_price, 'Ether')


	result={
	"descriptor"			: DESCRIPTOR,
	"hash" 					: receivedInput['hash'],			
	"nonce"					: receivedInput['nonce'],
	"block_hash"			: receivedInput['block_hash'],
	"block_number"			: receivedInput['block_number'],
	"transaction_index"		: receivedInput['transaction_index'],
	"from_address"			: receivedInput['from_address'],
	"to_address"			: receivedInput['to_address'],
	"value"					: Web3.fromWei(receivedInput['value'], 'Ether'),
	"gas" 					: receivedInput['gas'],
	"gas_price"				: receivedInput['gas_price'],
	#"input" 				: receivedInput['input'],
	"block_timestamp"		: timestamp(receivedInput['block_timestamp']),
	#"seller"				: receivedInput["from_address"],
	#"shares_for_sale"		: str(shares_for_sale),
	#"asking_price"			: str(asking_price),
	#"masternode"			: masternode
	"input"					: {"masternode": masternode, "shares_for_sale": str(shares_for_sale), "asking_price": str(asking_price), "seller": receivedInput["from_address"]}
	}
	


	y = json.dumps(result)
	#print(DESCRIPTOR)
	print(result)

	#COMPLETED

#----------------------------------------------------------------------------------------------------

def masternodeCreate(receivedInput):
	DESCRIPTOR = "MASTERNODE Creation"

	result={
	"descriptor"			: DESCRIPTOR,
	"hash" 					: receivedInput['hash'],			
	"nonce"					: receivedInput['nonce'],
	"block_hash"			: receivedInput['block_hash'],
	"block_number"			: receivedInput['block_number'],
	"transaction_index"		: receivedInput['transaction_index'],
	"from_address"			: receivedInput['from_address'],
	"to_address"			: receivedInput['to_address'],
	"value"					: Web3.fromWei(receivedInput['value'], 'Ether'),
	"gas" 					: receivedInput['gas'],
	"gas_price"				: receivedInput['gas_price'],
	#"input" 				: receivedInput['input'],
	"block_timestamp"		: timestamp(receivedInput['block_timestamp'])
	#"ip_address"			: "IP ADDRESS HERE / DETERMINES LOCATION. AND SELF HOSTED OR NOT"
	}
	
	print(receivedInput["value"])
	y = json.dumps(result)
	#print(DESCRIPTOR)
	print(result)


#------------------------------------------------------------------------------------------------------

def masternodeTerminate(receivedInput):
	DESCRIPTOR = "MASTERNODE Terminated"

	result={
	"descriptor"			: DESCRIPTOR,
	"hash" 					: receivedInput['hash'],			
	"nonce"					: receivedInput['nonce'],
	"block_hash"			: receivedInput['block_hash'],
	"block_number"			: receivedInput['block_number'],
	"transaction_index"		: receivedInput['transaction_index'],
	"from_address"			: receivedInput['from_address'],
	"to_address"			: receivedInput['to_address'],
	"value"					: Web3.fromWei(receivedInput['value'], 'Ether'),
	"gas" 					: receivedInput['gas'],
	"gas_price"				: receivedInput['gas_price'],
	#"input" 				: receivedInput['input'],
	"block_timestamp"		: timestamp(receivedInput['block_timestamp'])
	}
	

	y = json.dumps(result)
	#print(DESCRIPTOR)
	print(result)


#------------------------------------------------------------------------------------------------------------
#DEX

def dexPlaceOrder(receivedInput):
	DESCRIPTOR = "Dex Trade Order"

	data = receivedInput["input"]
	answer = parse(data)
	orderNumber = str(answer[4])
	Wanting =  dectohex(answer[0])
	Wanting = contractType(Wanting)
	shares_wanted = int(answer[1])
	shares_wanted2 = str(Web3.fromWei(shares_wanted, 'Ether'))
	giveCoin = int(answer[3])
	giveCoin2 = str(Web3.fromWei(giveCoin, 'Ether'))
	Giving = contractType(answer[2])
	#price =float(shares_wanted2) / float(giveCoin2)

	result={
	"descriptor"			: DESCRIPTOR,
	"hash" 					: receivedInput['hash'],			
	"nonce"					: receivedInput['nonce'],
	"block_hash"			: receivedInput['block_hash'],
	"block_number"			: receivedInput['block_number'],
	"transaction_index"		: receivedInput['transaction_index'],
	"from_address"			: receivedInput['from_address'],
	"to_address"			: receivedInput['to_address'],
	"value"					: Web3.fromWei(receivedInput['value'], 'Ether'),
	"gas" 					: receivedInput['gas'],
	"gas_price"				: receivedInput['gas_price'],
	#"inputs" 				: receivedInput['input'],
	"block_timestamp"		: timestamp(receivedInput['block_timestamp']),
	"input"					: {"orderNumber": answer[4], "amountWanted": shares_wanted2, "wantCoin": Wanting,  "amountGiving": giveCoin2, "giveCoin": Giving }
	}

	

	y = json.dumps(result)
	#print(DESCRIPTOR)
	print(result)


def dexFilledOrder(receivedInput):
	print("Dex Filled/Completed Order")


def dexOrderCancelled(receivedInput):
	print("Dex Order Cancelled")	


#------------------------------------------------------------------------------------------------------------
#ETH

def ethTransferWallettoDex1(receivedInput):
	DESCRIPTOR = ("HETH Wallet Dex TX #1")


	value					= Web3.fromWei(receivedInput['value'], 'Ether'),
	description = f'From {receivedInput["from_address"]} To  {receivedInput["to_address"]}'
	result={
	"descriptor"			: DESCRIPTOR,
	"hash" 					: receivedInput['hash'],			
	"nonce"					: receivedInput['nonce'],
	"block_hash"			: receivedInput['block_hash'],
	"block_number"			: receivedInput['block_number'],
	"transaction_index"		: receivedInput['transaction_index'],
	"from_address"			: receivedInput['from_address'],
	"to_address"			: receivedInput['to_address'],
	"value"					: value,
	"gas" 					: receivedInput['gas'],
	"gas_price"				: receivedInput['gas_price'],
	#"input" 				: receivedInput['input'],
	"block_timestamp"		: timestamp(receivedInput['block_timestamp']),
	"description"			: description
	}
	

	#y = json.dumps((result),sort_keys=True, indent=4, separators=(',', ': '))
	#print(DESCRIPTOR)
	#print("P2P Transaction")
	#print(result)
	#return result
	#COMPLETED
	
	return result
#------------------------------------------------------------------------------------------

def dexPlaceOrder(receivedInput):
	DESCRIPTOR = "Dex Sell Order placed for sale"


	
	

	y = json.dumps(result)
#	print(DESCRIPTOR)
	print(result)
	


def ethTransferWallettoDex2(receivedInput):
	print("ETH Transfer from wallet to Dex 2nd Tx (Sent to DEX side Wallet)")	


def hethToEth(receivedInput):
	print("ETH Convert HETH to ETH")


def ethOffNetwork(receivedInput):
	print("ETH Sent off Halo to Eth address")

#----------------------------------------------------------------------------------------------------------
#GAMES

def gamesDeposit(receivedInput):
	
	DESCRIPTOR = "Block and Chain Game Deposit"

	result={
	"descriptor"			: DESCRIPTOR,
	"hash" 					: receivedInput['hash'],			
	"nonce"					: receivedInput['nonce'],
	"block_hash"			: receivedInput['block_hash'],
	"block_number"			: receivedInput['block_number'],
	"transaction_index"		: receivedInput['transaction_index'],
	"from_address"			: receivedInput['from_address'],
	"to_address"			: receivedInput['to_address'],
	"value"					: Web3.fromWei(receivedInput['value'], 'Ether'),
	"gas" 					: receivedInput['gas'],
	"gas_price"				: receivedInput['gas_price'],
	#"input" 				: receivedInput['input'],
	"block_timestamp"		: timestamp(receivedInput['block_timestamp'])
	}
	

	y = json.dumps(result)
	#print(DESCRIPTOR)
	print(result)








Inputs	= {
	
	"0x": 			interHalo, #Done
#	"0x0029185b": 	noInfo,	
#	"0x00e77545": 	noInfo,	
#	"0x0309bebc": 	noInfo,	
#	"0x03e985d9": 	noInfo,	
#	"0x04e27777": 	noInfo,	
#	"0x06862706": 	noInfo,	
	"0x095ea7b3": 	ethTransferWallettoDex1,
#	"0x0b927666": 	dexPlaceOrder,
#	"0x0c8e8326": 	noInfo,
#	"0x13a30791": 	noInfo,
#	"0x19f7ae27": 	noInfo,
	#"0x2a95599f": 	MarketplaceCancelOrder,
	#"0x2e1a7d4d": 	haloFromDexToWallet,
#	"0x31663639": 	dexFilledOrder,
#	"0x44811585": 	noInfo,
#	"0x4b67e07f": 	noInfo,
#	"0x4d4ea199": 	noInfo,
#	"0x4e656f5f": 	noInfo,
#	"0x5848e444": 	noInfo,
#	"0x5bd05f7f": 	noInfo,
#	"0x60606040": 	noInfo,
#	"0x61443a5f": 	noInfo,
#	"0x65863672": 	noInfo,
#	"0x68627069": 	noInfo,
#	"0x6d69fcaf": 	noInfo,
#	"0x6f0ef949": 	noInfo,
	#"0x726c4d6f": 	CommitToSharedContract,
#	"0x749726fe": 	noInfo,
#	"0x76319190": 	noInfo,
#	"0x763819ea": 	masternodeCreate,
	#"0x792fa508": 	masternodeSuspend,
#	"0x7c325d0e": 	masternodeTerminate,
#	"0x7f746573": 	noInfo,
#	"0x8255069d": 	dexOrderCancelled,
#	"0x9407ea98": 	noInfo,
#	"0x976640e2": 	noInfo,
#	"0x98ca05eb": 	noInfo,
#	"0x99404220": 	noInfo,
#	"0x9e281a98": 	hethToEth,
#	"0x9f8a89ba": 	noInfo,
	#"0xa9059cbb": 	WrappedTokenTransfer,
#	"0xb214faa5": 	gamesDeposit,
#	"0xb36c2acc": 	ethOffNetwork,
#	"0xb5ec9999": 	noInfo,
	"0xc885bc58": 	masternodePayout
#	"0xc94ee098": 	noInfo,
#	"0xcbb0f029": 	noInfo,
#	"0xceeb7066": 	noInfo,
	"0xd0e30db0": 	HaloWalletToDex,
#	"0xd4444da6": 	masternodeSell,
#	"0xdf6c39fb": 	noInfo,
#	"0xea115fdb": 	noInfo,
#	"0xf612f5ce": 	noInfo,
#	"0xff3252a1": 	noInfo
}


#"_id" : ObjectId("5d06d1b3865f9d31d4b41098"),
#	"hash" : "0x690f43fbdd7dc40a1916eb7e2449fd81a701478131a8dc236f3c6b8673cec653",
#	"nonce" : 358,
#	"block_hash" : "0x9d9fcbdd9fcf82b61fd29b039018d594c274e408c452127dee57fd901b765269",
#	"block_number" : 400,
#	"transaction_index" : 0,
#	"from_address" : "0x6ee7d5471a483d8a72e6f32ecf3d70fdf0a7fe51",
#	"to_address" : "",
#	"value" : 0,
#	"gas" : 90000,
#	"gas_price" : 0,
#	"input" : "0x686270696e67",
#	"block_timestamp" : NumberLong("1527028381468412211")
#}



